'''题目
小Q在进行一场竞技游戏,这场游戏的胜负关键就在于能否能争夺一条长度为L的河道,即可以看作是[0,L]的一条数轴。
这款竞技游戏当中有n个可以提供视野的道具−真视守卫,第i个真视守卫能够覆盖区间[xi,yi]。现在小Q想知道至少用几个真视守卫就可以覆盖整段河道。
输入包括n+1行。

第一行包括两个正整数n和L(1<=n<=105,1<=L<=109)

接下来的n行,每行两个正整数xi,yi(0<=xi<=yi<=109),表示第i个真视守卫覆盖的区间。 

一个整数，表示最少需要的真视守卫数量, 如果无解, 输出-1。

4 6
3 6
2 4
0 2
4 7

3

下面的程序通过率90%，有一个案例通不过不知道为什么？？？
'''

import sys 
texts = []

textssplit(' ')
texts = [texts[i:i+2] for i in range(len(texts)//2)]
# for line in sys.stdin:
#     texts.append(line.split())
n = 30000
L = 10000000
texts.pop(0)
for i in range(len(texts)):
    for j in range(len(texts[0])):
        texts[i][j] = int(texts[i][j])
starts = [texts[i][0] for i in range(len(texts))]
end = [min(L,texts[i][1]) for i in range(len(texts))]
from operator import itemgetter
index = [index for index, value in sorted(enumerate(starts), key=itemgetter(1))]
starts.sort()
end = [end[index[i]] for i in range(len(end))]
if not starts[0] == 0:
    print(-1)
    exit()
ans = 0
y = 0
y_next = 0
i = 0
while i < len(starts):
    # 包含y且最远的
    if  starts[i] <= y:
        y_next = max(y_next,end[i])
        i+=1
        continue
    elif end[i] > y_next:
        # 更新y
        y = y_next
        ans+=1
        continue
    i+=1
print(ans+1)